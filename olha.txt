1. JavaScript - Manipulação do DOM
document.querySelectorAll(selector)
Seleciona todos os elementos que correspondem ao seletor CSS passado e retorna uma lista (NodeList).
Exemplo: document.querySelectorAll('.td-mostra') seleciona todos os elementos com a classe td-mostra.

element.addEventListener(event, callback)
Adiciona um "ouvinte" para eventos, executando uma função quando o evento ocorre (ex: clique, teclado).
Importante: esse ouvinte é adicionado em cada elemento individualmente.

Eventos do teclado:
Capturar teclas como Enter ("Enter") e Espaço (" ") para acessibilidade, permitindo operações com teclado.

Manipulação de classes CSS via JS:
element.classList.add('classe'), .remove('classe') e .contains('classe') para exibir/esconder elementos com transições suaves.

Controle do scroll do corpo (body):
Modificando document.body.style.overflow para "hidden" quando o popup está aberto, desabilitando scroll da página.

2. HTML Semântico e Acessibilidade
Uso de atributos ARIA:

role="dialog" informa aos leitores de tela que aquele elemento é uma janela de diálogo/modal.
aria-modal="true" indica que enquanto o diálogo está aberto, o restante da página está inacessível para leitores de tela.
aria-labelledby relaciona o título visível com o dialog para descrever melhor o conteúdo.
Elementos focáveis com tabindex="0" para permitir navegação por teclado em itens clicáveis.

Botão de fechar com aria-label para descrever sua função para tecnologias assistivas.

3. CSS Moderno e Design de UI
Tipografia moderna:
Usei a fonte 'Inter', que é elegante e muito usada em interfaces modernas.
Cores neutras (#6b7280, #374151) para o corpo do texto, garantindo bom contraste e leitura.

Espaçamento e layout:
Usando max-width com margin auto para centralizar o conteúdo em telas maiores e permitir responsividade.

Estilização de elementos clicáveis:
Background branco suave, bordas arredondadas (border-radius: 0.75rem), sombra leve para dar profundidade e hover/transform para microanimações elegantes.

Popup:

Posicionamento fixo (position: fixed; inset: 0) para cobrir toda a viewport com o backdrop sem afetar fluxo da página.
Transições suaves para opacity e transform, produzindo um efeito "fade + slide" ao abrir e fechar.
Botão de fechar posicionado com absoluta para fácil acesso.
Backdrop escurecido (rgba) para destacar o popup com blur visual (opcional).
4. Padrões de Interatividade e UX
Abrir popup ao clicar em qualquer elemento da classe alvo, mostrando conteúdo dinâmico conforme o item clicado.

Fechar popup:

Clicando fora da caixa (no backdrop),
Clicando no botão X,
Pressionando a tecla Escape.
Uso de microinterações suaves para uma experiência mais profissional e fluida.

5. Práticas recomendadas
Código JavaScript encapsulado num IIFE (Immediately Invoked Function Expression) para evitar poluir o escopo global.

Uso de seletor único para os elementos do popup e manipulação controlada de classes.

Termos e Tecnologias para pesquisa futura
DOM (Document Object Model) Manipulation
JavaScript Event Listeners (addEventListener)
Event delegation (para estudos mais avançados)
ARIA roles e acessibilidade web
HTML5 semantic tags
CSS Transitions e Transforms
CSS Flexbox & Centering techniques
Popup modal design patterns
Microinteractions and UI animation principles
Keyboard accessibility (tabindex, keydown event)
CSS Variables (para temas e variáveis reutilizáveis) — pode ser aplicado em códigos futuros para melhorar.
Se precisar, posso te ajudar a recomendar artigos, tutoriais ou vídeos para algum desses tópicos ou criar exemplos mais específicos! Quer?





<!DOCTYPE html>
<html lang="pt-BR" >
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Popup Modal Moderno com Títulos Personalizados</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet" />
  <style>
    :root {
      --color-bg: #ffffff;
      --color-text-primary: #111827;
      --color-text-secondary: #6b7280;
      --color-border: #d1d5db;
      --color-shadow-light: rgba(0,0,0,0.05);
      --color-shadow-dark: rgba(0,0,0,0.15);
      --radius-lg: 0.75rem;
      --transition-fast: 0.2s ease;
      --blue: #2563eb;
    }

    *, *::before, *::after {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background-color: var(--color-bg);
      color: var(--color-text-secondary);
      font-size: 17px;
      line-height: 1.5;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 4rem 2rem;
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem;
      justify-content: center;
      align-items: center;
    }

    header {
      width: 100%;
      text-align: center;
      padding-bottom: 3rem;
      user-select: none;
    }
    header h1 {
      font-size: 3.5rem;
      font-weight: 700;
      color: var(--color-text-primary);
      margin: 0;
      line-height: 1.1;
    }
    header p {
      margin-top: 0.5rem;
      font-weight: 500;
      font-size: 1.125rem;
      color: var(--color-text-secondary);
    }

    .td-mostra {
      background-color: var(--color-bg);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-lg);
      padding: 1rem 2rem;
      font-weight: 600;
      color: var(--color-text-primary);
      cursor: pointer;
      box-shadow: 0 2px 8px var(--color-shadow-light);
      transition:
        transform var(--transition-fast),
        border-color var(--transition-fast),
        color var(--transition-fast),
        box-shadow var(--transition-fast);
      user-select: none;
      flex: 1 1 200px;
      text-align: center;
      outline-offset: 3px;
    }
    .td-mostra:hover,
    .td-mostra:focus-visible {
      border-color: var(--blue);
      color: var(--blue);
      box-shadow: 0 6px 15px var(--color-shadow-dark);
      transform: scale(1.05);
      outline: 3px solid var(--blue);
    }
    .td-mostra:active {
      transform: scale(0.98);
    }

    .popup {
      position: fixed;
      inset: 0;
      background-color: rgba(0,0,0,0.35);
      backdrop-filter: saturate(160%) blur(6px);
      display: flex;
      justify-content: center;
      align-items: center;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      z-index: 9999;
    }
    .popup.show {
      opacity: 1;
      pointer-events: auto;
    }

    .popup-content {
      background-color: var(--color-bg);
      border-radius: var(--radius-lg);
      padding: 2.5rem 3rem 3rem;
      width: min(420px, 90vw);
      box-shadow: 0 12px 28px var(--color-shadow-dark);
      transform: translateY(40px);
      opacity: 0;
      transition:
        opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1),
        transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      outline-offset: 4px;
      color: var(--color-text-primary);
    }
    .popup.show .popup-content {
      opacity: 1;
      transform: translateY(0);
    }

    .popup h2 {
      margin: 0 0 1rem 0;
      font-weight: 700;
      font-size: 2rem;
      user-select: text;
    }
    .popup p {
      font-size: 1rem;
      color: var(--color-text-primary);
      margin-bottom: 1.5rem;
      user-select: text;
      white-space: pre-wrap;
    }

    .close-popup {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: transparent;
      border: none;
      color: #9ca3af;
      font-weight: 700;
      font-size: 1.25rem;
      cursor: pointer;
      transition: color var(--transition-fast);
      padding: 0.25rem 0.5rem;
      border-radius: calc(var(--radius-lg) / 2);
      user-select: none;
      line-height: 1;
    }
    .close-popup:hover,
    .close-popup:focus-visible {
      color: var(--color-text-primary);
      outline-offset: 2px;
      outline: 3px solid var(--blue);
      background-color: rgba(37, 99, 235, 0.12);
    }

    .popup:focus {
      outline: none;
    }
  </style>
</head>
<body>
  <header>
    <h1>Biblioteca de Componentes</h1>
    <p>Popup com título dinâmico e botões com texto igual</p>
  </header>

  <main>
    <section class="container" aria-label="Botões para abrir popups">
      <button type="button" class="td-mostra" tabindex="0"
        data-popup-content="Conteúdo do popup 1: Lorem ipsum dolor sit amet."
        data-popup-title="Título 1">mostrar</button>
      <button type="button" class="td-mostra" tabindex="0"
        data-popup-content="Conteúdo do popup 2: Consectetur adipiscing elit."
        data-popup-title="Título 2">mostrar</button>
      <button type="button" class="td-mostra" tabindex="0"
        data-popup-content="Conteúdo do popup 3: Vivamus suscipit tortor."
        data-popup-title="Título 3">mostrar</button>
    </section>
  </main>

  <div class="popup" role="dialog" aria-modal="true" aria-labelledby="popup-title" tabindex="-1">
    <div class="popup-content">
      <h2 id="popup-title">Título padrão</h2>
      <p class="popup-text">Conteúdo do popup</p>
      <button type="button" class="close-popup" aria-label="Fechar popup">&times;</button>
    </div>
  </div>

  <script>
    (function () {
      const popup = document.querySelector('.popup');
      const popupTitle = popup.querySelector('#popup-title');
      const popupText = popup.querySelector('.popup-text');
      const closeBtn = popup.querySelector('.close-popup');
      const buttons = document.querySelectorAll('.td-mostra');
      let lastFocusedButton = null;

      function openPopup(title, content) {
        popupTitle.textContent = title;
        popupText.textContent = content;
        document.body.style.overflow = 'hidden';
        popup.classList.add('show');
        popup.setAttribute('tabindex', '-1');
        popup.focus();
      }

      function closePopup() {
        popup.classList.remove('show');
        document.body.style.overflow = '';
        if (lastFocusedButton) lastFocusedButton.focus();
        lastFocusedButton = null;
      }

      buttons.forEach(button => {
        button.addEventListener('click', () => {
          lastFocusedButton = button;
          const content = button.getAttribute('data-popup-content') || '';
          const title = button.getAttribute('data-popup-title') || 'Sem título';
          openPopup(title, content);
        });

        button.addEventListener('keydown', e => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            lastFocusedButton = button;
            const content = button.getAttribute('data-popup-content') || '';
            const title = button.getAttribute('data-popup-title') || 'Sem título';
            openPopup(title, content);
          }
        });
      });

      closeBtn.addEventListener('click', closePopup);

      popup.addEventListener('click', e => {
        if (e.target === popup) closePopup();
      });

      document.addEventListener('keydown', e => {
        if (e.key === 'Escape' && popup.classList.contains('show')) {
          closePopup();
        }
      });
    })();
  </script>
</body>
</html>
